import socket
import json
import os
import time
from sha import *
from rsa import *

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bits = 256  # –†–∞–∑–º–µ—Ä –∫–ª—é—á–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∞, –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö 2048+)
e, n, d = None, None, None  # RSA-–∫–ª—é—á–∏ TSA
port = 5000  # –ü–æ—Ä—Ç –¥–ª—è TSA
type_hash = "sha256"  # –¢–∏–ø —Ö–µ—à–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö)

def generate_tsa_keys(bits):
    global e, n, d
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSA-–∫–ª—é—á–µ–π TSA...")
    priv_file = "tsa_private_10.json"
    pub_file = "tsa_public_10.json"
    if not os.path.exists(priv_file):
        p = generate_p(bits // 2)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ p
        q = generate_p(bits // 2)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ q
        (e, n), (d, _) = rsa(p, q)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
        save_private_key((d, n), priv_file)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
        save_public_key((e, n), pub_file)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
        print("–ö–ª—é—á–∏ TSA —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π: e * d mod phi = {(e * d) % ((p-1)*(q-1))}")
    else:
        private_key = load_private_key(priv_file)
        public_key = load_public_key(pub_file)
        e, n = public_key
        d = private_key[0]
        print("–ö–ª—é—á–∏ TSA –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")

def hash_m_from_type_hash(message, hash_type):
    global type_hash
    if hash_type == "sha256":
        return sha256(message)
    print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ö–µ—à–∞: {hash_type}")
    raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ö–µ—à–∞")

def sign(hash_msg, d, n):
    hash_int = int(hash_msg, 16)
    signature = encrypt_message(hash_int, d, n)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º encrypt_message –≤–º–µ—Å—Ç–æ fast_exp_mod
    return hex(signature)[2:]  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ hex –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 0x

def check_signature(L, alpha, p, signature, message, hash_type):
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ª–∏–¥–µ—Ä–∞")
    U, E, S = signature['U'], signature['E'], signature['S']
    E_int = int(E, 16)
    UL = (U * L) % p
    if pow(UL, E_int, p) == 0:
        print("–û—à–∏–±–∫–∞: (U * L)^E mod p = 0, –æ–±—Ä–∞—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    inv_UL_E = pow(UL, -E_int, p)
    alpha_S = fast_exp_mod(alpha, S, p)
    R_tilda = (inv_UL_E * alpha_S) % p
    E_tilda = hash_m_from_type_hash(message + str(R_tilda).encode("utf-8") + str(U).encode("utf-8"), "sha256")
    print(f"U: {U}, E: {E}, S: {S}")
    print(f"R_tilda: {R_tilda}")
    print(f"E_tilda: {E_tilda}")
    print(f"–û–∂–∏–¥–∞–µ–º–æ–µ E: {E}")
    if E_tilda == E:
        print("–ü–æ–¥–ø–∏—Å—å –ª–∏–¥–µ—Ä–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return True
    else:
        print("–ü–æ–¥–ø–∏—Å—å –ª–∏–¥–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        return False

# def create_timestamp_signature():
#     timestamp = time.strftime("%y%m%d%H%M%SZ", time.gmtime())
#     return timestamp

def validate_signature(data):
    global type_hash
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ª–∏–¥–µ—Ä–∞")
    try:
        message = data['EncapsulatedContentInfo']['OCTET_STRING_OPTIONAL'].encode("utf-8")
        type_hash = data['DigestAlgorithmIdentifiers']
        L = data['SignerInfos']['SubjectPublicKeyInfo']['L']
        alpha = data['SignerInfos']['SubjectPublicKeyInfo']['alpha']
        p = data['SignerInfos']['SubjectPublicKeyInfo']['p']
        signature = data['SignerInfos']['SignatureValue']

        if not check_signature(L, alpha, p, signature, message, type_hash):
            return {"error": "–ü–æ–¥–ø–∏—Å—å –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"}

        new_message = (
            message +
            str(signature["U"]).encode("utf-8") +  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º U –≤ —Å—Ç—Ä–æ–∫—É
            signature["E"].encode("utf-8") +
            str(signature["S"]).encode("utf-8")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º S –≤ —Å—Ç—Ä–æ–∫—É
        )
        hash_new_message = sha256(new_message)
        now_utc_time = time.strftime("%y%m%d%H%M%SZ", time.gmtime())
        hash_plus_time = (hash_new_message + now_utc_time).encode('utf-8')
        server_signature = encrypt_message(hash_plus_time, d, n)
        signed_data = {
            'Hash': hash_plus_time,
            'Timestamp': {
                'UTCTime': now_utc_time,
            },
            'Signature': server_signature,
            'Certificate': {
                'publicExponent': e,
                'N': n
            }
        }
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        return signed_data
    except Exception as err:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {err}")
        return {"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {err}"}

def save_to_file(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=4)
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def handle_client(conn, addr):
    print(f"–ü–æ–¥–∫–ª—é—á—ë–Ω –∫–ª–∏–µ–Ω—Ç {addr}")
    try:
        data = conn.recv(10 * 1024 * 1024).decode("utf-8")
        if not data:
            print("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
            return
        pkcs7_data = json.loads(data)
        print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        response = validate_signature(pkcs7_data)
        save_to_file("tsa_response.json", response)
        conn.sendall(json.dumps(response).encode("utf-8"))
        print("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as err:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {addr}: {err}")
    finally:
        conn.close()
        print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {addr} –∑–∞–∫—Ä—ã—Ç–æ")

def start_server(port):
    generate_tsa_keys(bits)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('localhost', port))
    sock.listen(1)
    print(f"–°–µ—Ä–≤–µ—Ä TSA –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    while True:
        try:
            conn, addr = sock.accept()
            handle_client(conn, addr)
        except KeyboardInterrupt:
            print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as err:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {err}")
    sock.close()

if __name__ == "__main__":
    start_server(port)